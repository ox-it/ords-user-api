# ============================
# Shiro TEST INI configuration
# ============================

#
# Setup for generating hashed passwords
#
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

#
# SSO Realm using REMOTE_USER principles and shibboleth affiliations
# as auth tokens
#
SSORealm = uk.ac.ox.it.ords.security.SSORealm

#
# JDBC Realm for using Ords DB for permissions
#
ds = org.postgresql.jdbc2.optional.SimpleDataSource
ds.serverName = localhost
ds.user = ords
ds.password = ords
ds.databaseName = ordstest
 
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT token FROM ordsuser WHERE principalname = ?
jdbcRealm.userRolesQuery = SELECT role FROM userrole WHERE principalname = ?
jdbcRealm.permissionsQuery = SELECT permission FROM permissions WHERE role = ?
jdbcRealm.credentialsMatcher = $passwordMatcher

#
# Set up realms and explicit ordering
#
securityManager.realms = $SSORealm, $jdbcRealm

#
# Filters
#
ssoFilter = uk.ac.ox.it.ords.security.SSOFilter

[urls]
/** = noSessionCreation, authcBasic[permissive], ssoFilter[permissive]